// generated by Fast Light User Interface Designer (fluid) version 1.0103

#ifndef OPTISGui_h
#define OPTISGui_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "ClientSocket.h"
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Input.h>
#include <FL/Fl_Color_Chooser.H>
#include <process.h>
#include <FL/Fl_Help_Dialog.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
#include "Motion.h"
#include <FL/Fl_Repeat_Button.H>
#include <time.h>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Output.H>
#include "Objects.h"
#include <FL/Fl_Bitmap.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Choice.H>
#include <FL/fl_show_input.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Return_Button.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Round_Button.H>
#include <FL/filename.H>

class OPTISGui {
  float oldRotX;
  float oldRotY;
  float oldRotZ;
  float oldTransX;
  float oldTransY;
  float oldZoom;
  int oldW;
  int oldH;
  //my variable
  int mipt_flag;
  ObjectData *mipt_data;
  ObjectData *mipt_data_1;
  ObjectData *objdata;
  Motion *mainAnimation;
  Motion *secondAnimation;
  Scanfile *scnfile;
  Preferences *pref;
  char WindowTitle[256];
  int recStep, trajStep, trajOk;
  int RecTimeflag;///recording flag
  int filecount;
  int timecount;
  int oldRSsysnr;
  int oldrefcoord;
  int oldobjcoord;

  char *recBase;
  char imgFormat[10];
  SbVec3f newPrefColor;
  char nomotiontxt[256];
  unsigned char *filmxbm, *photoxbm, *stopxbm, *resetxbm;
  Fl_Bitmap *film_bitmap, *photo_bitmap, *stop_bitmap, *reset_bitmap;
  int numLEDs, numCams, numCamSys;//numCamSys default =1
  double ledRadius;
public:
  char patientGeladen;//patient loaded
private:
  int oldTrajChoice;
  Commentlist *comList;
  Fl_Help_Dialog *help_dialog;
  ClientSocket csoc;
  int socketStopped;
  SdMatrix mCamSysTrafo[10];
public:
  SoTransform *tmpTransform;
private:
  SbVec3d tmpCamSysRot[10], tmpCamSysTrans[10];
  char tmpCamSysOverlap[10], oldCamSys;
  char LEDNextValue;
  char LEDNextValue2;
  SbVec3d vMean100;
  SbVec3f jMean100;
  int iMean100;
  char mvmHeaderText[256];
  Fl_Group **LEDGroups;
  Fl_Box **LEDGroupsTxt;
  Fl_Round_Button ***LEDGroupsBtn;
  char LEDGroupsStr[18][4];
  SbVec3d LEDmax[18], LEDmin[18], LEDmean[18];
  SbVec3f LEDimax[18], LEDimin[18], LEDimean[18];
  char LEDControlTxt[18][4][256];
  char LEDControl2Txt[18][4][256];
  SbVec3d vector[22];
  int LEDnum;
  int ctStopped;
  clock_t LEDclock;
  Fl_Group **ObjGroups;
  Fl_Round_Button ***ObjGroupsBtn;
  int LEDCharActualCamSys;
public:
  OPTISGui();
  Fl_Double_Window *LEDViewer;
private:
  inline void cb_LEDViewer_i(Fl_Double_Window*, void*);
  static void cb_LEDViewer(Fl_Double_Window*, void*);
public:
  Fl_Menu_Bar *MenuBarLEDViewer;
  static Fl_Menu_Item menu_MenuBarLEDViewer[];
  static Fl_Menu_Item *menuFile;
  static Fl_Menu_Item *FileNewPatient;
private:
  inline void cb_FileNewPatient_i(Fl_Menu_*, void*);
  static void cb_FileNewPatient(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *FileExport;
  static Fl_Menu_Item *FileExportTrajectories;
private:
  inline void cb_FileExportTrajectories_i(Fl_Menu_*, void*);
  static void cb_FileExportTrajectories(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *submenuSnapshot;
  static Fl_Menu_Item *sgiSnapshot;
private:
  inline void cb_sgiSnapshot_i(Fl_Menu_*, void*);
  static void cb_sgiSnapshot(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *tifSnapshot;
private:
  inline void cb_tifSnapshot_i(Fl_Menu_*, void*);
  static void cb_tifSnapshot(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *gifSnapshot;
private:
  inline void cb_gifSnapshot_i(Fl_Menu_*, void*);
  static void cb_gifSnapshot(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *jpgSnapshot;
private:
  inline void cb_jpgSnapshot_i(Fl_Menu_*, void*);
  static void cb_jpgSnapshot(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *otherSnapshot;
private:
  inline void cb_otherSnapshot_i(Fl_Menu_*, void*);
  static void cb_otherSnapshot(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *FileClose;
private:
  inline void cb_FileClose_i(Fl_Menu_*, void*);
  static void cb_FileClose(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menuEdit;
  static Fl_Menu_Item *EditSubject;
private:
  inline void cb_EditSubject_i(Fl_Menu_*, void*);
  static void cb_EditSubject(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *EditObjects;
private:
  inline void cb_EditObjects_i(Fl_Menu_*, void*);
  static void cb_EditObjects(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *EditLEDRadius;
  static Fl_Menu_Item *LedR05;
private:
  inline void cb_LedR05_i(Fl_Menu_*, void*);
  static void cb_LedR05(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR10;
private:
  inline void cb_LedR10_i(Fl_Menu_*, void*);
  static void cb_LedR10(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR15;
private:
  inline void cb_LedR15_i(Fl_Menu_*, void*);
  static void cb_LedR15(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR20;
private:
  inline void cb_LedR20_i(Fl_Menu_*, void*);
  static void cb_LedR20(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR25;
private:
  inline void cb_LedR25_i(Fl_Menu_*, void*);
  static void cb_LedR25(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR30;
private:
  inline void cb_LedR30_i(Fl_Menu_*, void*);
  static void cb_LedR30(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR40;
private:
  inline void cb_LedR40_i(Fl_Menu_*, void*);
  static void cb_LedR40(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR50;
private:
  inline void cb_LedR50_i(Fl_Menu_*, void*);
  static void cb_LedR50(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR60;
private:
  inline void cb_LedR60_i(Fl_Menu_*, void*);
  static void cb_LedR60(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR70;
private:
  inline void cb_LedR70_i(Fl_Menu_*, void*);
  static void cb_LedR70(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR80;
private:
  inline void cb_LedR80_i(Fl_Menu_*, void*);
  static void cb_LedR80(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR90;
private:
  inline void cb_LedR90_i(Fl_Menu_*, void*);
  static void cb_LedR90(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LedR100;
private:
  inline void cb_LedR100_i(Fl_Menu_*, void*);
  static void cb_LedR100(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *EditTrajectories;
private:
  inline void cb_EditTrajectories_i(Fl_Menu_*, void*);
  static void cb_EditTrajectories(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *EditBackGroundColor;
private:
  inline void cb_EditBackGroundColor_i(Fl_Menu_*, void*);
  static void cb_EditBackGroundColor(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *EditPreferences;
private:
  inline void cb_EditPreferences_i(Fl_Menu_*, void*);
  static void cb_EditPreferences(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menuView;
  static Fl_Menu_Item *ViewLoad;
private:
  inline void cb_ViewLoad_i(Fl_Menu_*, void*);
  static void cb_ViewLoad(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ViewSaveAs;
private:
  inline void cb_ViewSaveAs_i(Fl_Menu_*, void*);
  static void cb_ViewSaveAs(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ReferenceSystem;
  static Fl_Menu_Item *RSFOV;
private:
  inline void cb_RSFOV_i(Fl_Menu_*, void*);
  static void cb_RSFOV(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RSObj1;
private:
  inline void cb_RSObj1_i(Fl_Menu_*, void*);
  static void cb_RSObj1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RSObj2;
private:
  inline void cb_RSObj2_i(Fl_Menu_*, void*);
  static void cb_RSObj2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RSObj3;
private:
  inline void cb_RSObj3_i(Fl_Menu_*, void*);
  static void cb_RSObj3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RSObj4;
private:
  inline void cb_RSObj4_i(Fl_Menu_*, void*);
  static void cb_RSObj4(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RSObj5;
private:
  inline void cb_RSObj5_i(Fl_Menu_*, void*);
  static void cb_RSObj5(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RSObj6;
private:
  inline void cb_RSObj6_i(Fl_Menu_*, void*);
  static void cb_RSObj6(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ReferenceSystem2;
/*  static Fl_Menu_Item *RSObj1rel;
private:
  inline void cb_RSObj1rel_i(Fl_Menu_*, void*);
  static void cb_RSObj1rel(Fl_Menu_*, void*);
public:*/
  static Fl_Menu_Item *menuInsert;
  static Fl_Menu_Item *InsertTrajectory;
  static Fl_Menu_Item *InsTrajLED;
private:
  inline void cb_InsTrajLED_i(Fl_Menu_*, void*);
  static void cb_InsTrajLED(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *InsTrajCoord;
private:
  inline void cb_InsTrajCoord_i(Fl_Menu_*, void*);
  static void cb_InsTrajCoord(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menuAnimation;
  static Fl_Menu_Item *AnimRecMotion;
private:
  inline void cb_AnimRecMotion_i(Fl_Menu_*, void*);
  static void cb_AnimRecMotion(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimLoadMainMotion;
private:
  inline void cb_AnimLoadMainMotion_i(Fl_Menu_*, void*);
  static void cb_AnimLoadMainMotion(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimLEDCharacteristics;
private:
  inline void cb_AnimLEDCharacteristics_i(Fl_Menu_*, void*);
  static void cb_AnimLEDCharacteristics(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimStart;
private:
  inline void cb_AnimStart_i(Fl_Menu_*, void*);
  static void cb_AnimStart(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimStop;
private:
  inline void cb_AnimStop_i(Fl_Menu_*, void*);
  static void cb_AnimStop(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimOneFwd;
private:
  inline void cb_AnimOneFwd_i(Fl_Menu_*, void*);
  static void cb_AnimOneFwd(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimOneBwd;
private:
  inline void cb_AnimOneBwd_i(Fl_Menu_*, void*);
  static void cb_AnimOneBwd(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimPlayBwd;
private:
  inline void cb_AnimPlayBwd_i(Fl_Menu_*, void*);
  static void cb_AnimPlayBwd(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimReset;
private:
  inline void cb_AnimReset_i(Fl_Menu_*, void*);
  static void cb_AnimReset(Fl_Menu_*, void*);
public://060814
  static Fl_Menu_Item *ImpTraj;
private:
  inline void cb_ImpTraj_i(Fl_Menu_*, void*);
  static void cb_ImpTraj(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AnimStoreAnim;
  static Fl_Menu_Item *StoreSGI;
private:
  inline void cb_StoreSGI_i(Fl_Menu_*, void*);
  static void cb_StoreSGI(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *StoreTIF;
private:
  inline void cb_StoreTIF_i(Fl_Menu_*, void*);
  static void cb_StoreTIF(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *StoreGIF;
private:
  inline void cb_StoreGIF_i(Fl_Menu_*, void*);
  static void cb_StoreGIF(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *StoreJPEG;
private:
  inline void cb_StoreJPEG_i(Fl_Menu_*, void*);
  static void cb_StoreJPEG(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *StoreOther;
private:
  inline void cb_StoreOther_i(Fl_Menu_*, void*);
  static void cb_StoreOther(Fl_Menu_*, void*);
//add 060630
/*public:
  static Fl_Menu_Item *StoreRef;
private:
  inline void cb_StoreRef_i(Fl_Menu_*, void*);
  static void cb_StoreRef(Fl_Menu_*, void*);*/
public:
  static Fl_Menu_Item *menuCameras;
  static Fl_Menu_Item *cameraNumber;
  static Fl_Menu_Item *camNum03;
private:
  inline void cb_camNum03_i(Fl_Menu_*, void*);
  static void cb_camNum03(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum06;
private:
  inline void cb_camNum06_i(Fl_Menu_*, void*);
  static void cb_camNum06(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum09;
private:
  inline void cb_camNum09_i(Fl_Menu_*, void*);
  static void cb_camNum09(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum12;
private:
  inline void cb_camNum12_i(Fl_Menu_*, void*);
  static void cb_camNum12(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum15;
private:
  inline void cb_camNum15_i(Fl_Menu_*, void*);
  static void cb_camNum15(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum18;
private:
  inline void cb_camNum18_i(Fl_Menu_*, void*);
  static void cb_camNum18(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum21;
private:
  inline void cb_camNum21_i(Fl_Menu_*, void*);
  static void cb_camNum21(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum24;
private:
  inline void cb_camNum24_i(Fl_Menu_*, void*);
  static void cb_camNum24(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum27;
private:
  inline void cb_camNum27_i(Fl_Menu_*, void*);
  static void cb_camNum27(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *camNum30;
private:
  inline void cb_camNum30_i(Fl_Menu_*, void*);
  static void cb_camNum30(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *cameraMatrix;
private:
  inline void cb_cameraMatrix_i(Fl_Menu_*, void*);
  static void cb_cameraMatrix(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *cameraConnect;
private:
  inline void cb_cameraConnect_i(Fl_Menu_*, void*);
  static void cb_cameraConnect(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *cameraDisconnect;
private:
  inline void cb_cameraDisconnect_i(Fl_Menu_*, void*);
  static void cb_cameraDisconnect(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menuExtra;
  static Fl_Menu_Item *extraCameraTest;
private:
  inline void cb_extraCameraTest_i(Fl_Menu_*, void*);
  static void cb_extraCameraTest(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menuWindow;
  static Fl_Menu_Item *WindowSize;
  static Fl_Menu_Item *WindowSize512;
private:
  inline void cb_WindowSize512_i(Fl_Menu_*, void*);
  static void cb_WindowSize512(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WindowSize640;
private:
  inline void cb_WindowSize640_i(Fl_Menu_*, void*);
  static void cb_WindowSize640(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WindowSize768;
private:
  inline void cb_WindowSize768_i(Fl_Menu_*, void*);
  static void cb_WindowSize768(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WindowSizeOther;
private:
  inline void cb_WindowSizeOther_i(Fl_Menu_*, void*);
  static void cb_WindowSizeOther(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WindowLEDControl;
private:
  inline void cb_WindowLEDControl_i(Fl_Menu_*, void*);
  static void cb_WindowLEDControl(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *WindowLEDControl2;
private:
  inline void cb_WindowLEDControl2_i(Fl_Menu_*, void*);
  static void cb_WindowLEDControl2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *menuHelp;
  static Fl_Menu_Item *HelpManual;
private:
  inline void cb_HelpManual_i(Fl_Menu_*, void*);
  static void cb_HelpManual(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *HelpAbout;
private:
  inline void cb_HelpAbout_i(Fl_Menu_*, void*);
  static void cb_HelpAbout(Fl_Menu_*, void*);
public:
  Fl_Group *ControllerTop;
  Fl_Group *ControllerTopLeft;
  Fl_Button *RecMotionBtn;
private:
  inline void cb_RecMotionBtn_i(Fl_Button*, void*);
  static void cb_RecMotionBtn(Fl_Button*, void*);
public:
  Fl_Button *LoadMotionBtn;
private:
  inline void cb_LoadMotionBtn_i(Fl_Button*, void*);
  static void cb_LoadMotionBtn(Fl_Button*, void*);
/*public:
  Fl_Button *LoadRefMotionBtn;
private:
  inline void cb_LoadRefMotionBtn_i(Fl_Button*, void*);
  static void cb_LoadRefMotionBtn(Fl_Button*, void*);*/
public:
  Fl_Button *ResetMotionBtn;
private:
  inline void cb_ResetMotionBtn_i(Fl_Button*, void*);
  static void cb_ResetMotionBtn(Fl_Button*, void*);
public:
  Fl_Button *PlayBackwardMotionBtn;
private:
  inline void cb_PlayBackwardMotionBtn_i(Fl_Button*, void*);
  static void cb_PlayBackwardMotionBtn(Fl_Button*, void*);
public:
  Fl_Repeat_Button *RwdMotionBtn;
private:
  inline void cb_RwdMotionBtn_i(Fl_Repeat_Button*, void*);
  static void cb_RwdMotionBtn(Fl_Repeat_Button*, void*);
public:
  Fl_Button *StopMotionBtn;
private:
  inline void cb_StopMotionBtn_i(Fl_Button*, void*);
  static void cb_StopMotionBtn(Fl_Button*, void*);
public:
  Fl_Repeat_Button *FwdMotionBtn;
private:
  inline void cb_FwdMotionBtn_i(Fl_Repeat_Button*, void*);
  static void cb_FwdMotionBtn(Fl_Repeat_Button*, void*);
public:
  Fl_Button *StartMotionBtn;
private:
  inline void cb_StartMotionBtn_i(Fl_Button*, void*);
  static void cb_StartMotionBtn(Fl_Button*, void*);
public:
  Fl_Group *ControllerTopMiddle;
  Fl_Slider *StepSlider;
private:
  inline void cb_StepSlider_i(Fl_Slider*, void*);
  static void cb_StepSlider(Fl_Slider*, void*);
public:
  Fl_Group *ControllerTopRight;
  Fl_Value_Input *StepNrOutput;
private:
  inline void cb_StepNrOutput_i(Fl_Value_Input*, void*);
  static void cb_StepNrOutput(Fl_Value_Input*, void*);
public:
  Fl_Value_Output *NumberOfStepsOutput;
  Fl_Value_Output *TimeOutput;
  Fl_Box *CameraOkBox;
  Fl_Box *CameraOkText;
  Fl_Group *ControllerTopNameBox;
  Fl_Output *MotionNameOutput;
  Fl_Group *ObjectArea;
  Fl_Group *ObjectArea2;
  ObjectViewer *objview;
private:
  inline void cb_objview_i(ObjectViewer*, void*);
  static void cb_objview(ObjectViewer*, void*);
public:
  Fl_Group *ControllerLeft;
  Fl_Group *ControllerLeftTopGroup;
  Fl_Button *FilmButton;
private:
  inline void cb_FilmButton_i(Fl_Button*, void*);
  static void cb_FilmButton(Fl_Button*, void*);
public:
  Fl_Button *PhotoButton;
private:
  inline void cb_PhotoButton_i(Fl_Button*, void*);
  static void cb_PhotoButton(Fl_Button*, void*);
/*public:
  Fl_Button *AppRefBtn;
private:
  inline void cb_AppRefBtn_i(Fl_Button*, void*);
  static void cb_AppRefBtn(Fl_Button*, void*);*/
public:
  Fl_Button *AppAxisBtn;
private:
  inline void cb_AppAxisBtn_i(Fl_Button*, void*);
  static void cb_AppAxisBtn(Fl_Button*, void*);
public:
  Fl_Button *AppTF1Btn;
private:
  inline void cb_AppTF1Btn_i(Fl_Button*, void*);
  static void cb_AppTF1Btn(Fl_Button*, void*);
public:
  Fl_Button *AppTF2Btn;
private:
  inline void cb_AppTF2Btn_i(Fl_Button*, void*);
  static void cb_AppTF2Btn(Fl_Button*, void*);
public:
  Fl_Button *AppTF3Btn;
private:
  inline void cb_AppTF3Btn_i(Fl_Button*, void*);
  static void cb_AppTF3Btn(Fl_Button*, void*);
public:
  Fl_Button *AppCOSBtn;
private:
  inline void cb_AppCOSBtn_i(Fl_Button*, void*);
  static void cb_AppCOSBtn(Fl_Button*, void*);
public:
  Fl_Button *AppledBtn;
private:
  inline void cb_AppledBtn_i(Fl_Button*, void*);
  static void cb_AppledBtn(Fl_Button*, void*);
public:
  Fl_Box *ControllerLeftMiddleBox;
  Fl_Group *ControllerLeftBottom;
  Fl_Box *RotXBox;
  Fl_Roller *RotX;
private:
  inline void cb_RotX_i(Fl_Roller*, void*);
  static void cb_RotX(Fl_Roller*, void*);
public:
  Fl_Box *TransYBox;
  Fl_Roller *TransY;
private:
  inline void cb_TransY_i(Fl_Roller*, void*);
  static void cb_TransY(Fl_Roller*, void*);
public:
  Fl_Group *ControllerBottom;
  Fl_Group *ControllerBottomLeft;
  Fl_Box *RotYBox;
  Fl_Roller *RotY;
private:
  inline void cb_RotY_i(Fl_Roller*, void*);
  static void cb_RotY(Fl_Roller*, void*);
public:
  Fl_Box *TransXBox;
  Fl_Roller *TransX;
private:
  inline void cb_TransX_i(Fl_Roller*, void*);
  static void cb_TransX(Fl_Roller*, void*);
public:
  Fl_Button *XView;
private:
  inline void cb_XView_i(Fl_Button*, void*);
  static void cb_XView(Fl_Button*, void*);
public:
  Fl_Button *YView;
private:
  inline void cb_YView_i(Fl_Button*, void*);
  static void cb_YView(Fl_Button*, void*);
public:
  Fl_Button *ZView;
private:
  inline void cb_ZView_i(Fl_Button*, void*);
  static void cb_ZView(Fl_Button*, void*);
public:
  Fl_Button *FView;
private:
  inline void cb_FView_i(Fl_Button*, void*);
  static void cb_FView(Fl_Button*, void*);
public:
  Fl_Button *SView;
private:
  inline void cb_SView_i(Fl_Button*, void*);
  static void cb_SView(Fl_Button*, void*);
public:
  Fl_Button *HView;
private:
  inline void cb_HView_i(Fl_Button*, void*);
  static void cb_HView(Fl_Button*, void*);
public:
    Fl_Value_Slider *transparency_slider2;
private:
  inline void cb_transparency_slider2_i(Fl_Value_Slider*, void*);
  static void cb_transparency_slider2(Fl_Value_Slider*, void*);

public:
  Fl_Group *ControllerBottomMiddle;
  Fl_Choice *ObjWindow;
private:
  inline void cb_ObjWindow_i(Fl_Choice*, void*);
  static void cb_ObjWindow(Fl_Choice*, void*);
public:
  Fl_Group *ControllerBottomRight;
  Fl_Group *ZoomText;
  Fl_Group *ControllerRight;
  Fl_Group *ControllerRightTop;
  Fl_Value_Slider *SpeedSlider;
  Fl_Group *ControllerRightMiddle;
  Fl_Group *ControllerRightBottom;
  Fl_Box *RotZBox;
  Fl_Roller *RotZ;
private:
  inline void cb_RotZ_i(Fl_Roller*, void*);
  static void cb_RotZ(Fl_Roller*, void*);
public:
  Fl_Box *ZoomBox;
  Fl_Roller *Zoom;
private:
  inline void cb_Zoom_i(Fl_Roller*, void*);
  static void cb_Zoom(Fl_Roller*, void*);
public:
  Fl_Double_Window *EditLEDViewer;
  Fl_Group *OTextPart;
  Fl_Choice *ObjectChoice;
private:
  inline void cb_ObjectChoice_i(Fl_Choice*, void*);
  static void cb_ObjectChoice(Fl_Choice*, void*);
public:
  Fl_Button *EditObjectNameBtn;
private:
  inline void cb_EditObjectNameBtn_i(Fl_Button*, void*);
  static void cb_EditObjectNameBtn(Fl_Button*, void*);
public:
  Fl_Group *DrawStyleGroup;
  Fl_Check_Button *SolidRadio;
private:
  inline void cb_SolidRadio_i(Fl_Check_Button*, void*);
  static void cb_SolidRadio(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *LineRadio;
private:
  inline void cb_LineRadio_i(Fl_Check_Button*, void*);
  static void cb_LineRadio(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *PointRadio;
private:
  inline void cb_PointRadio_i(Fl_Check_Button*, void*);
  static void cb_PointRadio(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *HideRadio;
private:
  inline void cb_HideRadio_i(Fl_Check_Button*, void*);
  static void cb_HideRadio(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *PointSizeSlider;
private:
  inline void cb_PointSizeSlider_i(Fl_Value_Slider*, void*);
  static void cb_PointSizeSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *LineWidthSlider;
private:
  inline void cb_LineWidthSlider_i(Fl_Value_Slider*, void*);
  static void cb_LineWidthSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *LinePatternSlider;
private:
  inline void cb_LinePatternSlider_i(Fl_Value_Slider*, void*);
  static void cb_LinePatternSlider(Fl_Value_Slider*, void*);
public:
  Fl_Box *DrawStyleTxtBox;
  Fl_Group *OColorPart;
  Fl_Group *colorgrp;
  Fl_Group *PlainColorGroup;
  Fl_Value_Slider *ambient_red;
private:
  inline void cb_ambient_red_i(Fl_Value_Slider*, void*);
  static void cb_ambient_red(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *diffuse_red;
private:
  inline void cb_diffuse_red_i(Fl_Value_Slider*, void*);
  static void cb_diffuse_red(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *emission_red;
private:
  inline void cb_emission_red_i(Fl_Value_Slider*, void*);
  static void cb_emission_red(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *specular_red;
private:
  inline void cb_specular_red_i(Fl_Value_Slider*, void*);
  static void cb_specular_red(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *ambient_green;
private:
  inline void cb_ambient_green_i(Fl_Value_Slider*, void*);
  static void cb_ambient_green(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *diffuse_green;
private:
  inline void cb_diffuse_green_i(Fl_Value_Slider*, void*);
  static void cb_diffuse_green(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *emission_green;
private:
  inline void cb_emission_green_i(Fl_Value_Slider*, void*);
  static void cb_emission_green(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *specular_green;
private:
  inline void cb_specular_green_i(Fl_Value_Slider*, void*);
  static void cb_specular_green(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *ambient_blue;
private:
  inline void cb_ambient_blue_i(Fl_Value_Slider*, void*);
  static void cb_ambient_blue(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *diffuse_blue;
private:
  inline void cb_diffuse_blue_i(Fl_Value_Slider*, void*);
  static void cb_diffuse_blue(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *emission_blue;
private:
  inline void cb_emission_blue_i(Fl_Value_Slider*, void*);
  static void cb_emission_blue(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *specular_blue;
private:
  inline void cb_specular_blue_i(Fl_Value_Slider*, void*);
  static void cb_specular_blue(Fl_Value_Slider*, void*);
public:
  Fl_Group *ambgrp;
  Fl_Group *diffgrp;
  Fl_Group *emigrp;
  Fl_Group *specgrp;
  Fl_Group *redgrp;
  Fl_Group *greengrp;
  Fl_Group *bluegrp;
  Fl_Value_Slider *shininess_slider;
private:
  inline void cb_shininess_slider_i(Fl_Value_Slider*, void*);
  static void cb_shininess_slider(Fl_Value_Slider*, void*);
public:
  Fl_Group *shingrp;
  Fl_Value_Slider *transparency_slider;
private:
  inline void cb_transparency_slider_i(Fl_Value_Slider*, void*);
  static void cb_transparency_slider(Fl_Value_Slider*, void*);
public:
  Fl_Group *transgrp;
  Fl_Button *defaultcolorsbtn;
private:
  inline void cb_defaultcolorsbtn_i(Fl_Button*, void*);
  static void cb_defaultcolorsbtn(Fl_Button*, void*);
public:
  Fl_Group *OButtonPart;
  Fl_Button *Obtn_cancel;
private:
  inline void cb_Obtn_cancel_i(Fl_Button*, void*);
  static void cb_Obtn_cancel(Fl_Button*, void*);
public:
  Fl_Return_Button *Obtn_ok;
private:
  inline void cb_Obtn_ok_i(Fl_Return_Button*, void*);
  static void cb_Obtn_ok(Fl_Return_Button*, void*);
public:
  Fl_Double_Window *MotionWindow;
  Fl_Browser *MotionBrowser;
  Fl_Group *MWBtnGroup;
  Fl_Group *MWBtnLeftGrp;
  Fl_Group *MWBtnRightGrp;
  Fl_Return_Button *LoadMotionOk;
private:
  inline void cb_LoadMotionOk_i(Fl_Return_Button*, void*);
  static void cb_LoadMotionOk(Fl_Return_Button*, void*);
public:
  Fl_Button *LoadMotionCancel;
private:
  inline void cb_LoadMotionCancel_i(Fl_Button*, void*);
  static void cb_LoadMotionCancel(Fl_Button*, void*);
public:
  Fl_Double_Window *ImpTrajWindow;
  Fl_Browser *ImpTrajBrowser;
  Fl_Group *ITBtnGroup;
  Fl_Group *ITBtnLeftGrp;
  Fl_Group *ITBtnRightGrp;
  Fl_Return_Button *ImpTrajOk;
private:
  inline void cb_ImpTrajOk_i(Fl_Return_Button*, void*);
  static void cb_ImpTrajOk(Fl_Return_Button*, void*);
public:
  Fl_Button *ImpTrajCancel;
private:
  inline void cb_ImpTrajCancel_i(Fl_Button*, void*);
  static void cb_ImpTrajCancel(Fl_Button*, void*);
public:
  Fl_Double_Window *ChsTrajWindow;
  Fl_Browser *ChsTrajBrowser;
  Fl_Group *CTBtnGroup;
  Fl_Group *CTBtnLeftGrp;
  Fl_Group *CTBtnRightGrp;
  Fl_Return_Button *ChsTrajOk;
private:
  inline void cb_ChsTrajOk_i(Fl_Return_Button*, void*);
  static void cb_ChsTrajOk(Fl_Return_Button*, void*);
public:
  Fl_Button *ChsTrajCancel;
private:
  inline void cb_ChsTrajCancel_i(Fl_Button*, void*);
  static void cb_ChsTrajCancel(Fl_Button*, void*);
//public:
//  Fl_Double_Window *RefMotionWindow;
/*  Fl_Group *RefBtnTopGroup;
  Fl_Box *RMWBtnTopText;
  Fl_Box *RMWBtnTopText2;
  Fl_Box *RMWBtnTopText3;*/
//  Fl_Group *RefBtnMidGroup;
//  Fl_Box *RMWBtnMidText;
/*  Fl_Input *inputRefSysFile;
  Fl_Button *RefSysFileBrowse;
private:
  inline void cb_RefSysFileBrowse_i(Fl_Button*, void*);
  static void cb_RefSysFileBrowse(Fl_Button*, void*);
public:*/
/*  Fl_Input *inputRefFile1;
  Fl_Button *RefFile1Browse;
private:
  inline void cb_RefFile1Browse_i(Fl_Button*, void*);
  static void cb_RefFile1Browse(Fl_Button*, void*);
public:
  Fl_Choice *LEDRef1Choice;
  static Fl_Menu_Item menu_LEDRef1Choice[];
  static Fl_Menu_Item *LEDRef1C1;
  static Fl_Menu_Item *LEDRef1C2;
  static Fl_Menu_Item *LEDRef1C3;
  static Fl_Menu_Item *LEDRef1C4;
  static Fl_Menu_Item *LEDRef1C5;
  static Fl_Menu_Item *LEDRef1C6;
  static Fl_Menu_Item *LEDRef1C7;
  static Fl_Menu_Item *LEDRef1C8;
  static Fl_Menu_Item *LEDRef1C9;
  static Fl_Menu_Item *LEDRef1C10;
  static Fl_Menu_Item *LEDRef1C11;
  static Fl_Menu_Item *LEDRef1C12;
  static Fl_Menu_Item *LEDRef1C13;
  static Fl_Menu_Item *LEDRef1C14;
  static Fl_Menu_Item *LEDRef1C15;
  static Fl_Menu_Item *LEDRef1C16;
  static Fl_Menu_Item *LEDRef1C17;
  static Fl_Menu_Item *LEDRef1C18;
private:
  inline void cb_LEDRef1Choice_i(Fl_Choice*, void*);
  static void cb_LEDRef1Choice(Fl_Choice*, void*);
public:
  Fl_Value_Input *LEDRef1XCoord;
  Fl_Value_Input *LEDRef1YCoord;
  Fl_Value_Input *LEDRef1ZCoord;
  Fl_Input *inputRefFile2;
  Fl_Button *RefFile2Browse;
private:
  inline void cb_RefFile2Browse_i(Fl_Button*, void*);
  static void cb_RefFile2Browse(Fl_Button*, void*);
public:
  Fl_Choice *LEDRef2Choice;
  static Fl_Menu_Item menu_LEDRef2Choice[];
  static Fl_Menu_Item *LEDRef2C1;
  static Fl_Menu_Item *LEDRef2C2;
  static Fl_Menu_Item *LEDRef2C3;
  static Fl_Menu_Item *LEDRef2C4;
  static Fl_Menu_Item *LEDRef2C5;
  static Fl_Menu_Item *LEDRef2C6;
  static Fl_Menu_Item *LEDRef2C7;
  static Fl_Menu_Item *LEDRef2C8;
  static Fl_Menu_Item *LEDRef2C9;
  static Fl_Menu_Item *LEDRef2C10;
  static Fl_Menu_Item *LEDRef2C11;
  static Fl_Menu_Item *LEDRef2C12;
  static Fl_Menu_Item *LEDRef2C13;
  static Fl_Menu_Item *LEDRef2C14;
  static Fl_Menu_Item *LEDRef2C15;
  static Fl_Menu_Item *LEDRef2C16;
  static Fl_Menu_Item *LEDRef2C17;
  static Fl_Menu_Item *LEDRef2C18;
private:
  inline void cb_LEDRef2Choice_i(Fl_Choice*, void*);
  static void cb_LEDRef2Choice(Fl_Choice*, void*);
public:
  Fl_Value_Input *LEDRef2XCoord;
  Fl_Value_Input *LEDRef2YCoord;
  Fl_Value_Input *LEDRef2ZCoord;
 // Fl_Browser *RefMotionBrowser;
  Fl_Group *RMWBtnGroup;
  Fl_Group *RMWBtnLeftGrp;
  Fl_Group *RMWBtnRightGrp;
  Fl_Return_Button *LoadRefMotionOk;
private:
  inline void cb_LoadRefMotionOk_i(Fl_Return_Button*, void*);
  static void cb_LoadRefMotionOk(Fl_Return_Button*, void*);
public:
  Fl_Button *LoadRefMotionCancel;
private:
  inline void cb_LoadRefMotionCancel_i(Fl_Button*, void*);
  static void cb_LoadRefMotionCancel(Fl_Button*, void*);*/
public:
  Fl_Double_Window *WindowSizeWindow;
  Fl_Group *WSWTextGroup;
  Fl_Value_Input *inputWindowWidth;
  Fl_Value_Input *inputWindowHeight;
  Fl_Group *WSWTGTitle;
  Fl_Group *WSWTGText1;
  Fl_Group *WSWTGText2;
  Fl_Group *WSWBtnGroup;
  Fl_Button *WSW_Cancel;
private:
  inline void cb_WSW_Cancel_i(Fl_Button*, void*);
  static void cb_WSW_Cancel(Fl_Button*, void*);
public:
  Fl_Return_Button *WSW_Ok;
private:
  inline void cb_WSW_Ok_i(Fl_Return_Button*, void*);
  static void cb_WSW_Ok(Fl_Return_Button*, void*);
public:
  Fl_Double_Window *PrefWindow;
  Fl_Group *PathInputGroup;
  Fl_Group *txtgrpPath;
  Fl_Input *inputScanPath;
  Fl_Button *PrefScnDirBrowser;
private:
  inline void cb_PrefScnDirBrowser_i(Fl_Button*, void*);
  static void cb_PrefScnDirBrowser(Fl_Button*, void*);
public:
  Fl_Input *inputDataPath;
  Fl_Button *PrefDataDirBrowser;
private:
  inline void cb_PrefDataDirBrowser_i(Fl_Button*, void*);
  static void cb_PrefDataDirBrowser(Fl_Button*, void*);
public:
  Fl_Group *txtgrpImgCopy;
  Fl_Input *inputImgCopy;
private:
  inline void cb_inputImgCopy_i(Fl_Input*, void*);
  static void cb_inputImgCopy(Fl_Input*, void*);
public:
  Fl_Button *PrefImgCopyBrowser;
private:
  inline void cb_PrefImgCopyBrowser_i(Fl_Button*, void*);
  static void cb_PrefImgCopyBrowser(Fl_Button*, void*);
public:
  Fl_Input *inputExtraCode;
private:
  inline void cb_inputExtraCode_i(Fl_Input*, void*);
  static void cb_inputExtraCode(Fl_Input*, void*);
public:
  Fl_Output *outputImgCopy;
  Fl_Group *WindowInputGroup;
  Fl_Group *txtgrpWindow;
  Fl_Value_Input *wigWidth;
  Fl_Value_Input *wigHeight;
  Fl_Value_Input *wigXPos;
  Fl_Value_Input *wigYPos;
  Fl_Group *txtgrpBckgrdColor;
  Fl_Button *BgCChangeBtn;
private:
  inline void cb_BgCChangeBtn_i(Fl_Button*, void*);
  static void cb_BgCChangeBtn(Fl_Button*, void*);
public:
  Fl_Group *ColorArea;
  TmjColorChip *NewColorBox;
  TmjColorChip *OldColorBox;
  Fl_Group *wigDrawingAreaGroup;
  Fl_Group *PrefThresholdValuesGroup;
  Fl_Group *txtgrpThresVal;
  Fl_Value_Input *LEDOkay;
  Fl_Value_Input *LEDVisible;
  Fl_Value_Input *LEDWeakly;
  Fl_Value_Output *LEDError;
  Fl_Box *LEDOkayTxtBox;
  Fl_Group *PrefSocketGroup;
  Fl_Group *txtgrpSocket;
  Fl_Input *inputSocketPort;
  Fl_Input *inputSocketHost;
  Fl_Input *inputOPTISController;
  Fl_Button *OPTISContrBrowse;
private:
  inline void cb_OPTISContrBrowse_i(Fl_Button*, void*);
  static void cb_OPTISContrBrowse(Fl_Button*, void*);
public:
  Fl_Input *inputTempDir;
  Fl_Button *TempDirBrowse;
private:
  inline void cb_TempDirBrowse_i(Fl_Button*, void*);
  static void cb_TempDirBrowse(Fl_Button*, void*);
public:
  Fl_Group *PathButtonGroup;
  Fl_Button *PrefCancel;
private:
  inline void cb_PrefCancel_i(Fl_Button*, void*);
  static void cb_PrefCancel(Fl_Button*, void*);
public:
  Fl_Return_Button *PrefOk;
private:
  inline void cb_PrefOk_i(Fl_Return_Button*, void*);
  static void cb_PrefOk(Fl_Return_Button*, void*);
public:
  Fl_Double_Window *PatientWindow;
  Fl_Group *PatientDataGroup;
  Fl_Box *PatientText;
  Fl_Group *PatientRadioGroup;
  Fl_Check_Button *NewPatientBtn;
private:
  inline void cb_NewPatientBtn_i(Fl_Check_Button*, void*);
  static void cb_NewPatientBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *ExistingPatientBtn;
private:
  inline void cb_ExistingPatientBtn_i(Fl_Check_Button*, void*);
  static void cb_ExistingPatientBtn(Fl_Check_Button*, void*);
public:
  Fl_Input *PatientName;
private:
  inline void cb_PatientName_i(Fl_Input*, void*);
  static void cb_PatientName(Fl_Input*, void*);
public:
  Fl_Input *PatientFirstName;
private:
  inline void cb_PatientFirstName_i(Fl_Input*, void*);
  static void cb_PatientFirstName(Fl_Input*, void*);
public:
  Fl_Input *PatientAnatomy;
private:
  inline void cb_PatientAnatomy_i(Fl_Input*, void*);
  static void cb_PatientAnatomy(Fl_Input*, void*);
public:
  Fl_Input *PatientRecordingDate;
private:
  inline void cb_PatientRecordingDate_i(Fl_Input*, void*);
  static void cb_PatientRecordingDate(Fl_Input*, void*);
public:
  Fl_Input *PatientRemarks;
private:
  inline void cb_PatientRemarks_i(Fl_Input*, void*);
  static void cb_PatientRemarks(Fl_Input*, void*);
public:
  Fl_Input *PatientScanFileName;
private:
  inline void cb_PatientScanFileName_i(Fl_Input*, void*);
  static void cb_PatientScanFileName(Fl_Input*, void*);
public:
  Fl_Button *PatientHelp;
private:
  inline void cb_PatientHelp_i(Fl_Button*, void*);
  static void cb_PatientHelp(Fl_Button*, void*);
public:
  Fl_Group *dateGrp;
  Fl_Round_Button *iPatDMY;
private:
  inline void cb_iPatDMY_i(Fl_Round_Button*, void*);
  static void cb_iPatDMY(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *iPatYMD;
private:
  inline void cb_iPatYMD_i(Fl_Round_Button*, void*);
  static void cb_iPatYMD(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *iPatMDY;
private:
  inline void cb_iPatMDY_i(Fl_Round_Button*, void*);
  static void cb_iPatMDY(Fl_Round_Button*, void*);
public:
  Fl_Group *FileBaseInputGroup;
  Fl_Group *pattxtgrpFileBase;
  Fl_Input *patInputFileBase;
private:
  inline void cb_patInputFileBase_i(Fl_Input*, void*);
  static void cb_patInputFileBase(Fl_Input*, void*);
public:
  Fl_Group *PatientDirGroup;
private:
  inline void cb_PatientDirGroup_i(Fl_Group*, void*);
  static void cb_PatientDirGroup(Fl_Group*, void*);
public:
  Fl_Check_Button *PatDirAutoBtn;
private:
  inline void cb_PatDirAutoBtn_i(Fl_Check_Button*, void*);
  static void cb_PatDirAutoBtn(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *PatDirExistBtn;
private:
  inline void cb_PatDirExistBtn_i(Fl_Check_Button*, void*);
  static void cb_PatDirExistBtn(Fl_Check_Button*, void*);
public:
  Fl_Box *PatientDirText;
private:
  inline void cb_PatientDirText_i(Fl_Box*, void*);
  static void cb_PatientDirText(Fl_Box*, void*);
public:
  Fl_Input *PatientScanDirectory;
private:
  inline void cb_PatientScanDirectory_i(Fl_Input*, void*);
  static void cb_PatientScanDirectory(Fl_Input*, void*);
public:
  Fl_Input *PatientScanPath;
private:
  inline void cb_PatientScanPath_i(Fl_Input*, void*);
  static void cb_PatientScanPath(Fl_Input*, void*);
public:
  Fl_Input *PatientDataDirectory;
private:
  inline void cb_PatientDataDirectory_i(Fl_Input*, void*);
  static void cb_PatientDataDirectory(Fl_Input*, void*);
public:
  Fl_Input *PatientDataPath;
private:
  inline void cb_PatientDataPath_i(Fl_Input*, void*);
  static void cb_PatientDataPath(Fl_Input*, void*);
public:
  Fl_Button *PatScnDirBrowser;
private:
  inline void cb_PatScnDirBrowser_i(Fl_Button*, void*);
  static void cb_PatScnDirBrowser(Fl_Button*, void*);
public:
  Fl_Button *PatDataDirBrowser;
private:
  inline void cb_PatDataDirBrowser_i(Fl_Button*, void*);
  static void cb_PatDataDirBrowser(Fl_Button*, void*);
public:
  Fl_Group *PatientPathInputGroup;
  Fl_Group *pattxtgrpPath;
  Fl_Input *patInputScanPath;
private:
  inline void cb_patInputScanPath_i(Fl_Input*, void*);
  static void cb_patInputScanPath(Fl_Input*, void*);
public:
  Fl_Input *patInputDataPath;
private:
  inline void cb_patInputDataPath_i(Fl_Input*, void*);
  static void cb_patInputDataPath(Fl_Input*, void*);
public:
  Fl_Button *DatabaseScnDirBrowser;
private:
  inline void cb_DatabaseScnDirBrowser_i(Fl_Button*, void*);
  static void cb_DatabaseScnDirBrowser(Fl_Button*, void*);
public:
  Fl_Button *DatabaseDataDirBrowser;
private:
  inline void cb_DatabaseDataDirBrowser_i(Fl_Button*, void*);
  static void cb_DatabaseDataDirBrowser(Fl_Button*, void*);
public:
  Fl_Group *PatientButtonGroup;
  Fl_Button *PatientCancel;
private:
  inline void cb_PatientCancel_i(Fl_Button*, void*);
  static void cb_PatientCancel(Fl_Button*, void*);
public:
  Fl_Return_Button *PatientOk;
private:
  inline void cb_PatientOk_i(Fl_Return_Button*, void*);
  static void cb_PatientOk(Fl_Return_Button*, void*);
public:
  Fl_Double_Window *TrajectoryWindow;
  Fl_Group *TextTPart;
  Fl_Input *TrajectoryName;
  Fl_Choice *TrajNameChoice;
private:
  inline void cb_TrajNameChoice_i(Fl_Choice*, void*);
  static void cb_TrajNameChoice(Fl_Choice*, void*);
public:
  Fl_Choice *LEDNameChoice;
private:
  inline void cb_LEDNameChoice_i(Fl_Choice*, void*);
  static void cb_LEDNameChoice(Fl_Choice*, void*);
/*public:
  Fl_Choice *LEDRefChoice;
  static Fl_Menu_Item menu_LEDRefChoice[];
  static Fl_Menu_Item *LEDRefC1;
  static Fl_Menu_Item *LEDRefC2;
  static Fl_Menu_Item *LEDRefC3;
  static Fl_Menu_Item *LEDRefC4;
  static Fl_Menu_Item *LEDRefC5;
  static Fl_Menu_Item *LEDRefC6;
private:
  inline void cb_LEDRefChoice_i(Fl_Choice*, void*);
  static void cb_LEDRefChoice(Fl_Choice*, void*);*/
public:
  Fl_Choice *TrajCamSysChoice;
  static Fl_Menu_Item menu_TrajCamSysChoice[];
  static Fl_Menu_Item *TrajCamSysMain;
  static Fl_Menu_Item *TrajCamSys1;
  static Fl_Menu_Item *TrajCamSys2;
  static Fl_Menu_Item *TrajCamSys3;
  static Fl_Menu_Item *TrajCamSys4;
  static Fl_Menu_Item *TrajCamSys5;
  static Fl_Menu_Item *TrajCamSys6;
  static Fl_Menu_Item *TrajCamSys7;
  static Fl_Menu_Item *TrajCamSys8;
  static Fl_Menu_Item *TrajCamSys9;
  Fl_Choice *TrajObjChoice;
  static Fl_Menu_Item menu_TrajObjChoice[];
  static Fl_Menu_Item *TrajObjNone;
  static Fl_Menu_Item *TrajObjObj1;
  static Fl_Menu_Item *TrajObjObj2;
  static Fl_Menu_Item *TrajObjObj3;
  static Fl_Menu_Item *TrajObjObj4;
  static Fl_Menu_Item *TrajObjObj5;
  static Fl_Menu_Item *TrajObjObj6;
  Fl_Choice *TrajRefChoice;
  static Fl_Menu_Item menu_TrajRefChoice[];
  static Fl_Menu_Item *TrajRefNone;
  static Fl_Menu_Item *TrajRefObj1;
  static Fl_Menu_Item *TrajRefObj2;
  static Fl_Menu_Item *TrajRefObj3;
  static Fl_Menu_Item *TrajRefObj4;
  static Fl_Menu_Item *TrajRefObj5;
  static Fl_Menu_Item *TrajRefObj6;
private:
  inline void cb_RefCoordChoice_i(Fl_Choice*, void*);
  static void cb_RefCoordChoice(Fl_Choice*, void*);
public:
  Fl_Group *coordgrp;
  Fl_Value_Input *XCoord;
  Fl_Value_Input *YCoord;
  Fl_Value_Input *ZCoord;
  Fl_Value_Input *FirstStep;
  Fl_Value_Input *LastStep;
  Fl_Value_Output *TotalSteps;
  Fl_Box *NoSBox;
  Fl_Group *ButtonTPart;
  Fl_Button *Tbtn_cancel;
private:
  inline void cb_Tbtn_cancel_i(Fl_Button*, void*);
  static void cb_Tbtn_cancel(Fl_Button*, void*);
public:
  Fl_Return_Button *Tbtn_ok;
private:
  inline void cb_Tbtn_ok_i(Fl_Return_Button*, void*);
  static void cb_Tbtn_ok(Fl_Return_Button*, void*);
public:
  Fl_Button *Tbtn_del;
private:
  inline void cb_Tbtn_del_i(Fl_Button*, void*);
  static void cb_Tbtn_del(Fl_Button*, void*);
public:
  Fl_Return_Button *Tbtn_ok2;
private:
  inline void cb_Tbtn_ok2_i(Fl_Return_Button*, void*);
  static void cb_Tbtn_ok2(Fl_Return_Button*, void*);
public:
  Fl_Button *Tbtn_cancel2;
private:
  inline void cb_Tbtn_cancel2_i(Fl_Button*, void*);
  static void cb_Tbtn_cancel2(Fl_Button*, void*);
public:
  Fl_Return_Button *Tbtn_ok3;
private:
  inline void cb_Tbtn_ok3_i(Fl_Return_Button*, void*);
  static void cb_Tbtn_ok3(Fl_Return_Button*, void*);
public:
  Fl_Double_Window *AboutWindow;
  Fl_Box *AboutTitle;
  Fl_Group *AboutTxtGroup;
  Fl_Box *AboutCopyright;
  Fl_Box *AboutCBox;
  Fl_Box *AboutKlinik;
  Fl_Box *AboutStreet;
  Fl_Box *AboutPLZ;
  Fl_Box *AboutWWW;
  Fl_Box *AboutSupport;
  Fl_Box *AboutAtBox;
  Fl_Group *AboutBtnGroup;
  Fl_Return_Button *AboutOKBtn;
private:
  inline void cb_AboutOKBtn_i(Fl_Return_Button*, void*);
  static void cb_AboutOKBtn(Fl_Return_Button*, void*);
public:
  Fl_Double_Window *MatrixWindow;
  Fl_Group *MatrixMainGroup;
  Fl_Group *MatrixTitle;
  Fl_Group *MatrixTitle2;
  Fl_Choice *MatrixChoice;
  static Fl_Menu_Item menu_MatrixChoice[];
  static Fl_Menu_Item *MatChoice1;
private:
  inline void cb_MatChoice1_i(Fl_Menu_*, void*);
  static void cb_MatChoice1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MatChoice2;
private:
  inline void cb_MatChoice2_i(Fl_Menu_*, void*);
  static void cb_MatChoice2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MatChoice3;
private:
  inline void cb_MatChoice3_i(Fl_Menu_*, void*);
  static void cb_MatChoice3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MatChoice4;
private:
  inline void cb_MatChoice4_i(Fl_Menu_*, void*);
  static void cb_MatChoice4(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MatChoice5;
private:
  inline void cb_MatChoice5_i(Fl_Menu_*, void*);
  static void cb_MatChoice5(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MatChoice6;
private:
  inline void cb_MatChoice6_i(Fl_Menu_*, void*);
  static void cb_MatChoice6(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MatChoice7;
private:
  inline void cb_MatChoice7_i(Fl_Menu_*, void*);
  static void cb_MatChoice7(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MatChoice8;
private:
  inline void cb_MatChoice8_i(Fl_Menu_*, void*);
  static void cb_MatChoice8(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MatChoice9;
private:
  inline void cb_MatChoice9_i(Fl_Menu_*, void*);
  static void cb_MatChoice9(Fl_Menu_*, void*);
public:
  Fl_Check_Button *MatOverlap;
  Fl_Group *MatRotGroup;
  Fl_Value_Input *MatRotX;
  Fl_Value_Input *MatRotY;
  Fl_Value_Input *MatRotZ;
  Fl_Group *MatTransGroup;
  Fl_Value_Input *MatTransX;
  Fl_Value_Input *MatTransY;
  Fl_Value_Input *MatTransZ;
  Fl_Group *MatrixBtnGroup;
  Fl_Button *Matrix_Cancel;
private:
  inline void cb_Matrix_Cancel_i(Fl_Button*, void*);
  static void cb_Matrix_Cancel(Fl_Button*, void*);
public:
  Fl_Return_Button *Matrix_Ok;
private:
  inline void cb_Matrix_Ok_i(Fl_Return_Button*, void*);
  static void cb_Matrix_Ok(Fl_Return_Button*, void*);
public:
  Fl_Button *Matrix_Default;
private:
  inline void cb_Matrix_Default_i(Fl_Button*, void*);
  static void cb_Matrix_Default(Fl_Button*, void*);
public:
  Fl_Double_Window *LEDControlWindow;
  Fl_Browser *LEDControlBrowser;
  Fl_Group *LEDCtrlBtnGroup;
  Fl_Group *LEDCtrlMiddleGrp;
  Fl_Group *LEDCtrlBtnLeftGrp;
  Fl_Box *LEDCtrlUpdate;
  Fl_Round_Button *LEDCtrlConinuous;
private:
  inline void cb_LEDCtrlConinuous_i(Fl_Round_Button*, void*);
  static void cb_LEDCtrlConinuous(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *LEDCtrlManual;
private:
  inline void cb_LEDCtrlManual_i(Fl_Round_Button*, void*);
  static void cb_LEDCtrlManual(Fl_Round_Button*, void*);
public:
  Fl_Button *LEDCtrlNext;
private:
  inline void cb_LEDCtrlNext_i(Fl_Button*, void*);
  static void cb_LEDCtrlNext(Fl_Button*, void*);
public:
  Fl_Group *LEDCtrlNextResGrp;
  Fl_Group *LEDCtrlBtnRightGrp;
  Fl_Button *LEDSave;
private:
  inline void cb_LEDSave_i(Fl_Button*, void*);
  static void cb_LEDSave(Fl_Button*, void*);
//
public:
  Fl_Double_Window *LEDControl2Window;
  Fl_Browser *LEDControl2Browser;
  Fl_Group *LEDCtrl2BtnGroup;
  Fl_Group *LEDCtrl2MiddleGrp;
  Fl_Group *LEDCtrl2BtnLeftGrp;
  Fl_Box *LEDCtrl2Update;
  Fl_Round_Button *LEDCtrl2Coninuous;
private:
  inline void cb_LEDCtrl2Coninuous_i(Fl_Round_Button*, void*);
  static void cb_LEDCtrl2Coninuous(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *LEDCtrl2Manual;
private:
  inline void cb_LEDCtrl2Manual_i(Fl_Round_Button*, void*);
  static void cb_LEDCtrl2Manual(Fl_Round_Button*, void*);
public:
  Fl_Button *LEDCtrl2Next;
private:
  inline void cb_LEDCtrl2Next_i(Fl_Button*, void*);
  static void cb_LEDCtrl2Next(Fl_Button*, void*);
public:
  Fl_Group *LEDCtrl2NextResGrp;
  Fl_Group *LEDCtrl2BtnRightGrp;
  Fl_Button *LEDSave2;
private:
  inline void cb_LEDSave2_i(Fl_Button*, void*);
  static void cb_LEDSave2(Fl_Button*, void*);
public:
  Fl_Group *LEDCtrl2RightGroup;
  Fl_Choice *LED1Choice;
  static Fl_Menu_Item menu_LED1Choice[];
  static Fl_Menu_Item *LED1C1;
  static Fl_Menu_Item *LED1C2;
  static Fl_Menu_Item *LED1C3;
  static Fl_Menu_Item *LED1C4;
  static Fl_Menu_Item *LED1C5;
  static Fl_Menu_Item *LED1C6;
  static Fl_Menu_Item *LED1C7;
  static Fl_Menu_Item *LED1C8;
  static Fl_Menu_Item *LED1C9;
  static Fl_Menu_Item *LED1C10;
  static Fl_Menu_Item *LED1C11;
  static Fl_Menu_Item *LED1C12;
  static Fl_Menu_Item *LED1C13;
  static Fl_Menu_Item *LED1C14;
  static Fl_Menu_Item *LED1C15;
  static Fl_Menu_Item *LED1C16;
  static Fl_Menu_Item *LED1C17;
  static Fl_Menu_Item *LED1C18;
  static Fl_Menu_Item *LED1C19;
  Fl_Choice *LED2Choice;
  static Fl_Menu_Item menu_LED2Choice[];
  static Fl_Menu_Item *LED2C1;
  static Fl_Menu_Item *LED2C2;
  static Fl_Menu_Item *LED2C3;
  static Fl_Menu_Item *LED2C4;
  static Fl_Menu_Item *LED2C5;
  static Fl_Menu_Item *LED2C6;
  static Fl_Menu_Item *LED2C7;
  static Fl_Menu_Item *LED2C8;
  static Fl_Menu_Item *LED2C9;
  static Fl_Menu_Item *LED2C10;
  static Fl_Menu_Item *LED2C11;
  static Fl_Menu_Item *LED2C12;
  static Fl_Menu_Item *LED2C13;
  static Fl_Menu_Item *LED2C14;
  static Fl_Menu_Item *LED2C15;
  static Fl_Menu_Item *LED2C16;
  static Fl_Menu_Item *LED2C17;
  static Fl_Menu_Item *LED2C18;
  static Fl_Menu_Item *LED2C19;
  Fl_Group *LEDCtrl2RightNGrp;

  Fl_Double_Window *MvmNameWindow;
private:
  inline void cb_MvmNameWindow_i(Fl_Double_Window*, void*);
  static void cb_MvmNameWindow(Fl_Double_Window*, void*);
public:
  Fl_Group *MvmNameWinGroup;
  Fl_Box *MvmNameWinText;
  Fl_Choice *MvmNameList;
private:
  inline void cb_MvmNameListChoice_i(Fl_Choice*, void*);
  static void cb_MvmNameListChoice(Fl_Choice*, void*);
public:
  Fl_Input *MvmNameWinInput;
  Fl_Return_Button *MvmNameWinOkBtn;
private:
  inline void cb_MvmNameWinOkBtn_i(Fl_Return_Button*, void*);
  static void cb_MvmNameWinOkBtn(Fl_Return_Button*, void*);
public:
  Fl_Double_Window *LEDCharWindow;
  Fl_Group *LedCharWinSpeed;
  Fl_Choice *LEDCharCamSysChoice;
  static Fl_Menu_Item menu_LEDCharCamSysChoice[];
  static Fl_Menu_Item *lccsc0;
private:
  inline void cb_lccsc0_i(Fl_Menu_*, void*);
  static void cb_lccsc0(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc1;
private:
  inline void cb_lccsc1_i(Fl_Menu_*, void*);
  static void cb_lccsc1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc2;
private:
  inline void cb_lccsc2_i(Fl_Menu_*, void*);
  static void cb_lccsc2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc3;
private:
  inline void cb_lccsc3_i(Fl_Menu_*, void*);
  static void cb_lccsc3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc4;
private:
  inline void cb_lccsc4_i(Fl_Menu_*, void*);
  static void cb_lccsc4(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc5;
private:
  inline void cb_lccsc5_i(Fl_Menu_*, void*);
  static void cb_lccsc5(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc6;
private:
  inline void cb_lccsc6_i(Fl_Menu_*, void*);
  static void cb_lccsc6(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc7;
private:
  inline void cb_lccsc7_i(Fl_Menu_*, void*);
  static void cb_lccsc7(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc8;
private:
  inline void cb_lccsc8_i(Fl_Menu_*, void*);
  static void cb_lccsc8(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *lccsc9;
private:
  inline void cb_lccsc9_i(Fl_Menu_*, void*);
  static void cb_lccsc9(Fl_Menu_*, void*);
public:
  Fl_Choice *LedCharSpeedFrequency;
  static Fl_Menu_Item menu_LedCharSpeedFrequency[];
  static Fl_Menu_Item *F200Hz;
private:
  inline void cb_F200Hz_i(Fl_Menu_*, void*);
  static void cb_F200Hz(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *F400Hz;
private:
  inline void cb_F400Hz_i(Fl_Menu_*, void*);
  static void cb_F400Hz(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *F600Hz;
private:
  inline void cb_F600Hz_i(Fl_Menu_*, void*);
  static void cb_F600Hz(Fl_Menu_*, void*);
public:
  Fl_Group *LedCharWinLEDObj;
  Fl_Box *LEDTxtLED;
  Fl_Box *LEDTxtObject;
  Fl_Box *LEDTxtObject1;
  Fl_Box *LEDTxtObject2;
  Fl_Box *LEDTxtObject3;
  Fl_Box *LEDTxtObject4;
  Fl_Box *LEDTxtObject5;
  Fl_Box *LEDTxtObject6;
  Fl_Box *LEDTxtObjectOff;
  Fl_Box *LEDline1h;
  Fl_Box *LEDline2h;
  Fl_Box *LEDline3h;
  Fl_Box *LEDline0;
  Fl_Box *LEDline1;
  Fl_Box *LEDline2;
  Fl_Box *LEDline3;
  Fl_Box *LEDline4;
  Fl_Box *LEDline5;
  Fl_Box *LEDTxtTxt;
  Fl_Group *LedCharWinObjObj;
  Fl_Box *ObjTxtRef;
  Fl_Box *ObjTxtObject;
  Fl_Box *ObjTxtObject0;
  Fl_Box *ObjTxtObject1;
  Fl_Box *ObjTxtObject2;
  Fl_Box *ObjTxtObject3;
  Fl_Box *ObjTxtObject4;
  Fl_Box *ObjTxtObject5;
  Fl_Box *ObjTxtObject6;
  Fl_Box *ObjTxtObjectOff;
  Fl_Box *Objline1h;
  Fl_Box *Objline2h;
  Fl_Box *Objline1;
  Fl_Box *Objline2;
  Fl_Box *Objline3;
  Fl_Box *Objline4;
  Fl_Box *Objline5;
  Fl_Box *Objline3h;
  Fl_Box *Objline4h;
  Fl_Box *Objline6;
  Fl_Box *ObjTxtTxt;
  Fl_Box *ObjTxtObj1;
  Fl_Box *ObjTxtObj2;
  Fl_Box *ObjTxtObj3;
  Fl_Box *ObjTxtObj4;
  Fl_Box *ObjTxtObj5;
  Fl_Box *ObjTxtObj6;
  Fl_Group *LedCharWinBtnGrp;
  Fl_Button *LEDChar_Cancel;
private:
  inline void cb_LEDChar_Cancel_i(Fl_Button*, void*);
  static void cb_LEDChar_Cancel(Fl_Button*, void*);
public:
  Fl_Return_Button *LEDChar_Ok;
private:
  inline void cb_LEDChar_Ok_i(Fl_Return_Button*, void*);
  static void cb_LEDChar_Ok(Fl_Return_Button*, void*);
public:
  Fl_Double_Window *camTestWin;
  Fl_Group *camTestGrp;
  Fl_Value_Input *ctInitX;
  Fl_Value_Input *ctInitY;
  Fl_Value_Input *ctFinalX;
  Fl_Value_Input *ctFinalY;
  Fl_Value_Input *ctSteps;
  Fl_Value_Input *ctDelay;
  Fl_Group *ctWinBtnGrp;
  Fl_Button *ct_Cancel;
private:
  inline void cb_ct_Cancel_i(Fl_Button*, void*);
  static void cb_ct_Cancel(Fl_Button*, void*);
public:
  Fl_Return_Button *ct_Ok;
private:
  inline void cb_ct_Ok_i(Fl_Return_Button*, void*);
  static void cb_ct_Ok(Fl_Return_Button*, void*);
  
  //edit 6/12/2013
  //setting up the MIPT
public:
  static Fl_Menu_Item *MIPT;
private:
  inline void cb_MIPT_i(Fl_Menu_*, void*);
  static void cb_MIPT(Fl_Menu_*, void*);
  //cancel the MIPT
  public:
  static Fl_Menu_Item *MIPTcancel;
private:
  inline void cb_MIPTcancel_i(Fl_Menu_*, void*);
  static void cb_MIPTcancel(Fl_Menu_*, void*);

public:
  Fl_Double_Window *ConnectInfoWin;
  Fl_Group *ConInfoWinTxt1;
  Fl_Group *ConInfoWinTxt2;
  void show();
  void setObjectEditorValuesCB2();
  void setObjectEditorObjects2();
  void setObjectEditorValuesCB();
  void close();
  void setObjectEditorObjects();
  void setPointer(Preferences *p, Scanfile *s);
  void applyMotion(char up);
  void reset();
  void clearMainAnimation();
  void resetLEDs();
  void initPatient();
  void buildDirectoryNames();
  void insertValues();
  void makeDir(char *path, char *name);
  void setTrajEditorChoice();
  void setLEDEditorChoice();
//void setRefLEDChoice();
  void setRefCoordChoice();
  char connectSocket(char message = 1);
  void disconnectSocket();
  void receiveSocketData();
  void resetTrajectories();
  void calcTrajValues();
  void clearLEDs();
  void checkLEDs();
  void resetCamSysTrafo();
  void changeCamNumber(int nr);
  void SetMatrixWinValues(int nr);
  void guiFixedXYZ(SdMatrix &rot, double a, double b, double c);
  void setCamSystemsGui();
  void insertLEDTrajectory(int lednr, int camnr);
  void deActivateCamSystemChoice(int nr);
  void insertFOV();
  void setLEDControlValues();
  void setLEDControl2Values();
  void checkLEDValues();
  void zahlenAnordnen(char *st);
  void getNewRecordingText();
  void initLEDCharWindow();
  void receiveOnceSocketData();
  void getLEDCharValues(int camsysnr);
  void setLEDCharValues(int camsysnr);
  void setCommentList();
};
#endif
